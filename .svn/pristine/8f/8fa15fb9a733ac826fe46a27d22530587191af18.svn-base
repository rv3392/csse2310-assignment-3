#include "2310dealer.h"

Instance** start_players(int playerCount, char** playerExecutableNames,
        char* unparsedPath);
Instance* start_player(int playerId, int playerCount, 
        char* playerExecutableFilename, char* unparsedPath);
void initiate_player(int readPipeFD, int writePipeFD, FILE** read,
        FILE** write, char* unparsedPath) ;
char** get_player_args(char* playerExecutableFilename, int playerId,
        int playerCount);
Deck* get_parsed_deck(int argc, char** argv);
Path* get_parsed_path(int argc, char** argv);
char* get_unparsed_path(int argc, char** argv);
int get_next_player_id();

Dealer* create_dealer(int argc, char** argv);
void loop_dealer(Dealer* dealer);
int get_next_player_id(Path* path);
int parse_move_buffer(char* moveBuffer);
void send_message_to_all(char* hapMessage, Dealer* dealer);
Effect* move_player(int playerId, int move, Dealer* dealer);
Effect* get_player_effect(int move, char* siteType, Player* player,
        Deck* deck);
char* create_hap_message(int id, Effect* playerEffect);
bool is_game_over(Dealer* dealer);
void print_all_scores(Instance** players, int playerCount);

void register_handlers();
void sigchld_handler();

int main(int argc, char** argv) {
    signal(SIGCHLD, sigchld_handler);
    Dealer* dealer = create_dealer(argc, argv);
    loop_dealer(dealer);
}

Dealer* create_dealer(int argc, char** argv) {
    if (argc < 4) {
        fprintf(stderr, "Usage: 2310dealer deck path p1 {p2}\n");
        exit(1);
    }

    Deck* deck = get_parsed_deck(argc, argv);
    Path* path = get_parsed_path(argc, argv);

    char* unparsedPath = get_unparsed_path(argc, argv);
    int playerCount = argc - 3;
    char** playerProcessNames = malloc(sizeof(char*) * playerCount);
    for (int p = 0; p < playerCount; p++) {
        playerProcessNames[p] = argv[p + 3];
    }

    Instance** players = start_players(playerCount, playerProcessNames, 
            unparsedPath);

    Dealer* dealer = calloc(1, sizeof(Dealer));
    dealer->playerCount = playerCount;
    dealer->players = players;
    dealer->path = path;
    dealer->deck = deck;

    return dealer;
}

void loop_dealer(Dealer* dealer) {
    print_path(stdout, dealer->path);
    while(true) {
        int playerId = get_next_player_id(dealer->path);
        Instance* turnPlayer = dealer->players[playerId];
        send_message(turnPlayer->writePipe, "YT\n");

        char* moveBuffer = malloc(sizeof(char*) * 4);
        read_message(turnPlayer->readPipe, moveBuffer);
        int move = parse_move_buffer(moveBuffer);
        Effect* playerMove = move_player(playerId, move, dealer);

        char* hapMessage = create_hap_message(playerId, playerMove);
        send_message_to_all(hapMessage, dealer);
        print_player_summary(stdout, turnPlayer->player);

        print_path(stdout, dealer->path);
        if(is_game_over(dealer)) {
            send_message_to_all("DONE", dealer);
            print_all_scores(dealer->players, dealer->playerCount);
            exit(0);
        }
    }
}

Deck* get_parsed_deck(int argc, char** argv) {
    FILE* deckFile = fopen(argv[1], "r");
    if (deckFile == NULL) {
        fprintf(stderr, "Error reading deck\n");
        exit(2);
    }
    //TODO: Add check for \n at end of these files
    Deck* deck = read_deck(deckFile);
    fclose(deckFile);
    return deck;
}

Path* get_parsed_path(int argc, char** argv) {
    FILE* pathFile = fopen(argv[2], "r");
    if (pathFile == NULL) {
        fprintf(stderr, "Error reading path\n");
        exit(3);
    }

    Path* path = malloc(sizeof(Path));
    int error = read_path(pathFile, argc - 3, path);
    if (error > 0) {
        fprintf(stderr, "Error reading path\n");
        exit(3);
    }
    fclose(pathFile);
    return path;
}

char* get_unparsed_path(int argc, char** argv) {
    FILE* pathFile = fopen(argv[2], "r");
    size_t* unparsedPathSize = malloc(sizeof(size_t));
    *unparsedPathSize = 20;
    char* unparsedPath = malloc(*unparsedPathSize);
    get_line(&unparsedPath, unparsedPathSize, pathFile);
    fclose(pathFile);

    return unparsedPath;
}

void register_handlers() {
}

void sigchld_handler() {
    wait(NULL);
    fprintf(stderr, "Error starting process\n");
    exit(4);
}

bool is_game_over(Dealer* dealer) {
    for (int playerNum = 0; playerNum < dealer->playerCount; playerNum++) {
        Player* player = dealer->players[playerNum]->player;
        if (dealer->path->numSites - 1 != player->site) {
            return false;
        }
    }
    return true;
}

int get_next_player_id(Path* path) {
    for (int siteNum = 0; siteNum < path->numSites; siteNum++) {
        if (get_num_players_on_site(path->sites[siteNum]) > 0) {
            return pop_from_player_stack(path->sites[siteNum]->playersOnSite);
        }
    }

    return 0;
}

int parse_move_buffer(char* moveBuffer) {
    int move = -1;
    int argumentsRead = sscanf(moveBuffer, "DO%d", &move);

    if (argumentsRead != 1 || move == -1) {
        fprintf(stderr, "Communications error\n");
        exit(5);
    }

    return move;
}

char* create_hap_message(int id, Effect* playerEffect) {
    char* hapMessage = calloc(HAP_MESSAGE_LENGTH, sizeof(char));
    sprintf(hapMessage, "HAP%d,%d,%d,%d,%d\n", id, playerEffect->site, 
        playerEffect->points, playerEffect->money, playerEffect->card);
    return hapMessage;
}

void send_message_to_all(char* hapMessage, Dealer* dealer) {
    for (int p = 0; p < dealer->playerCount; p++) {
        send_message(dealer->players[p]->writePipe, hapMessage);
    }
}

Effect* move_player(int playerId, int move, Dealer* dealer) {
    Effect* playerEffect = get_player_effect(move, 
            dealer->path->sites[move]->type, dealer->players[playerId]->player,
            dealer->deck);
    push_to_player_stack(dealer->path->sites[move]->playersOnSite, playerId);
    //update_player_positions(dealer->path, playerId, 
    //       dealer->players[playerId]->player->site, move);
    update_player(dealer->players[playerId]->player, playerEffect);

    return playerEffect;
}

Effect* get_player_effect(int move, char* siteType, Player* player,
        Deck* deck) {
    Effect* effect = calloc(1, sizeof(Effect));
    effect->site = move;
    if (strcmp(siteType, "Mo") == 0) {
        effect->money = 3;
    } else if (strcmp(siteType, "V1") == 0) {
        effect->v1Visits = 1;
    } else if (strcmp(siteType, "V2") == 0) {
        effect->v2Visits = 1;
    } else if (strcmp(siteType, "Do") == 0) {
        effect->points = player->money / 2;
        effect->money = -1 * player->money;
    } else if (strcmp(siteType, "Ri") == 0) {
        effect->card = get_next_card(deck);
    } else if (strcmp(siteType, "::") == 0) {
        //Do Nothing
    } else {
        fprintf(stderr, "Communications error \n");
        exit(5);
    }

    //TODO: Workaround - Should remove later
    //if (effect->card == 0) {
    //    effect->card = '@';
    //}

    return effect;
}

Instance** start_players(int playerCount, char** playerExecutableNames,
        char* unparsedPath) {
    fflush(stdout);
    Instance** players = malloc(sizeof(Instance*) * playerCount);
    for (int id = 0; id < playerCount; id++) {
        players[id] = start_player(id, playerCount,
                playerExecutableNames[id], unparsedPath);
    }

    return players;
}

Instance* start_player(int playerId, int playerCount, 
        char* playerExecutableFilename, char* unparsedPath) {
    Instance* player = malloc(sizeof(Instance));

    int writePipeFD[2];
    int readPipeFD[2];
    int errPipeFD[2];
    pipe(writePipeFD);
    pipe(readPipeFD);
    pipe(errPipeFD);

    fflush(stdout);

    int pid = fork();
    if (pid < 0) {
        fprintf(stderr, "Error starting process\n");
        exit(4);
    } else if (pid == 0) {
        //Pipe write end of read pipe into stdout of child
        dup2(readPipeFD[1], 1);
        //Pipe read end of write pipe into stdin of child
        dup2(writePipeFD[0], 0);
        //Pipe write end of error pipe into stderr of child to surpress
        dup2(errPipeFD[1], 2);

        //Close unneeded pipe ends
        close(readPipeFD[0]);
        close(writePipeFD[1]);
        close(errPipeFD[0]);

        execvp(playerExecutableFilename, get_player_args(
                playerExecutableFilename, playerId, playerCount));
        exit(SIGCHLD);
    } 
    
    //Close unneeded pipe ends
    close(readPipeFD[1]);
    close(writePipeFD[0]);

    fflush(stdout);

    FILE **read = malloc(sizeof(FILE*));
    FILE **write = malloc(sizeof(FILE*));
    initiate_player(readPipeFD[0], writePipeFD[1], read, write, unparsedPath);

    player->pid = pid;
    player->readPipeFD = readPipeFD[0];
    player->writePipeFD = writePipeFD[1];
    player->readPipe = *read;
    player->writePipe = *write;
    player->player = create_player(&playerCount, &playerId);

    return player;
}

char** get_player_args(char* playerExecutableFilename, int playerId,
        int playerCount) {
    char* playerIdArg = malloc(sizeof(char) * 8);
    char* playerCountArg = malloc(sizeof(char) * 8);
    sprintf(playerIdArg, "%d", playerId);
    sprintf(playerCountArg, "%d", playerCount);

    char** playerArgs = malloc(sizeof(char*) * 4);
    playerArgs[0] = playerExecutableFilename;
    playerArgs[1] = playerCountArg;
    playerArgs[2] = playerIdArg;
    playerArgs[3] = NULL;

    return playerArgs;
}

void initiate_player(int readPipeFD, int writePipeFD, FILE** read,
        FILE** write, char* unparsedPath) {
    *read = fdopen(readPipeFD, "r");
    while(fgetc(*read) != '^');

    *write = fdopen(writePipeFD, "w");
    fprintf(*write, "%s\n", unparsedPath);
    fflush(*write);
}

void print_all_scores(Instance** players, int playerCount) {
    printf("Scores: ");
    for (int player = 0; player < playerCount; player++) {
        if (player != 0) {
            printf(",");
        }
        printf("%d", calculate_score(players[player]->player));
    }
    printf("\n");
    fflush(stdout);
}