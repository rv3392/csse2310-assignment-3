#include "path.h"

int parse_path(char* unparsedPath, Path* parsedPath, int playerCount);
bool check_path(char* path);
bool check_type(char* type);
int check_start_end(char* type);

int get_num_sites(char** path, int* numSites);
int get_type(char first_letter, char second_letter, char* type);
int* get_positions(int playerCount);
int get_player_limit(char unparsedLimit, int* parsedLimit);
PlayerStack* get_players_on_site(int siteNum, int playerCount);

//TODO: Simplify this down
void print_path(FILE* to, Path* path) {
    for (int numSite = 0; numSite < path->numSites; numSite++) {
        Site* site = path->sites[numSite];
        fprintf(to, "%s ", site->type);
    }

    fprintf(to, "\n");

    int playerStringHeight = 1;
    int playerStringWidth = (path->numSites * 3 + 1);
    char* playerString = malloc(sizeof(char) * (playerStringWidth * playerStringHeight + 1));

    for (int j = 0; j < playerStringWidth * playerStringHeight; j++) {
        if ((j + 1) % (playerStringWidth) == 0) {
            playerString[j] = '\n';
        } else {
            playerString[j] = ' ';
        } 
    }

    playerString[(playerStringWidth * playerStringHeight)] = '\0';

    for (int numSite = 0; numSite < path->numSites; numSite++) {
        Site* site = path->sites[numSite];
        PlayerStack* playersOnSite = site->playersOnSite;   

        if ((playersOnSite->top + 1) > playerStringHeight) {
            int newHeight = playersOnSite->top + 1;
            char* newPlayerString = malloc(sizeof(char) * playerStringWidth * newHeight);

            for (int j = 0; j < playerStringWidth * newHeight; j++) {
                if ((j + 1) % (playerStringWidth) == 0) {
                    newPlayerString[j] = '\n';
                } else {
                    newPlayerString[j] = ' ';
                } 
            }

            memcpy(newPlayerString, playerString, playerStringWidth * playerStringHeight);
            playerString = newPlayerString;
            playerStringHeight = newHeight;

            playerString[playerStringWidth * playerStringHeight] = '\0';
        }

        for (int j = 0; j < (playersOnSite->top + 1); j++) {
            playerString[numSite * 3 + j * playerStringWidth] = 
                        '0' + playersOnSite->players[j];
        }
    }

    fprintf(to, "%s", playerString);
}

int read_path(FILE* from, int playerCount, Path* parsedPath) {
    char* unparsedPath = malloc(sizeof(char) * 1);
    size_t* initialPathSize = malloc(sizeof(size_t) * 1);
    *initialPathSize = 20;

    //Block until the path appears in stdin
    while(!get_line(&unparsedPath, initialPathSize, from));
    int error = parse_path(unparsedPath, parsedPath, playerCount);
    if (error > 0) {
        return 1;
    }

    return 0;
}

int get_next_barrier(Path* path, int playerPosition) {
    int siteNum = playerPosition;
    do {
        siteNum++;
    } while (strcmp(path->sites[siteNum]->type, "::") != 0);

    return siteNum;
}

int parse_path(char* unparsedPath, Path* parsedPath, int playerCount) {
    if (!check_path(unparsedPath)) {
        return 1;
    }
    
    int* numSites = malloc(sizeof(int));
    if (get_num_sites(&unparsedPath, numSites) == 1) {
        return 1;
    }
    if (*numSites == 1) {
        return 1;
    }

    Site** sites = malloc(sizeof(Site*) * *numSites);
    for (int i = 0; i < *numSites * 3; i += 3) {
        Site* site = malloc(sizeof(Site));
        site->type = malloc(sizeof(char) * 3);
        site->playerLimit = 0;
        site->playersOnSite = get_players_on_site(i, playerCount);
        sites[i / 3] = site;

        if (get_type(unparsedPath[i], unparsedPath[i + 1], site->type) == 1) {
            return 1;
        }
        if (get_player_limit(unparsedPath[i + 2], &site->playerLimit) == 1) {
            return 1;
        }

        if (i == 0 || i == (*numSites - 1) * 3) {
            if (check_start_end(site->type) == 1) {
                return 1;
            }
        }
    }

    parsedPath->sites = sites;
    parsedPath->numSites = *numSites;

    return 0;
}

bool check_path(char* path) {
    return true;
}

bool check_type(char* type) {
    char* types[7] = {"::","Mo", "V1", "V2", "Do", "Ri", "Si"};
    for (int i = 0; i < 7; i++) {
        if (strcmp(type, types[i]) == 0) {
            return true;
        }
    }
    return false;
}

int check_start_end(char* type) {
    if (strcmp(type, "::")) {
        return 1;
    }

    return 0;
}

int get_num_sites(char** path, int* numSites) {
    char* unparsedNumSites = strtok_r(*path, ";", path);
    if (unparsedNumSites == NULL) {        
        return 1;       
    }

    *numSites = strtol(unparsedNumSites, NULL, 10);
    if (*numSites == 0) {
        return 1;       
    }
    
    if (*path == NULL) {
        return 1;  
    }

    return 0;
}

int get_type(char first_letter, char second_letter, char* type) {
    type[0] = first_letter;
    type[1] = second_letter;
    type[2] = '\0';

    if (!check_type(type)) {
        return 1;
    }

    return 0;
}

int* get_positions(int playerCount) {
    int* playerPositions = malloc(sizeof(int) * playerCount);
    for (int i = 0; i < playerCount; i++) {
        playerPositions[i] = 0;
    }
    return playerPositions;
}

int get_player_limit(char unparsedLimit, int* parsedLimit) {
    if (unparsedLimit == '-') {
        *parsedLimit = -1;
    } else if(isdigit(unparsedLimit)) {
        *parsedLimit = atoi(&unparsedLimit);
    } else {
        return 1;
    }

    return 0;
}

PlayerStack* get_players_on_site(int siteNum, int playerCount) {
    PlayerStack* playersOnSite = create_player_stack(playerCount);
    for (int i = playerCount; i > 0; i--) {
        if (siteNum == 0) {
            push_to_player_stack(playersOnSite, i - 1);
        }
    }

    return playersOnSite;
}

void update_player_positions(Path* path, int id, int oldSite, int newSite) {
    int playerId = pop_from_player_stack(path->sites[oldSite]->playersOnSite);
    if (playerId != id) {
        exit(7);
    }
    push_to_player_stack(path->sites[newSite]->playersOnSite, id);
}
